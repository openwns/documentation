#############################
Pytree and a simple Scenarios
#############################


============================
Use pytree to show scenarios
============================

OpenWNS provides a tool named ``pytree`` to show the created scenario and its parameters without starting a simulation.
To use ``pytree`` to open a config file, for example: ``~/myOpenWNS/tests/system/wimac-tests/configOFDMA/configMulticell.py``, you should go to your test directory ``~/myOpenWNS/tests/system/wimac-tests/configOFDMA`` and run the following command:

.. code-block:: bash

   $ ~/myOpenWNS/bin/pytree configMulticell.py

After that, a program starts to visualise the config, as shown in :ref:`figure-scenarios-pytree`.


.. _figure-scenarios-pytree:

.. figure:: images/pytree.*
   :align: center

   View of pytree

Expand ``configMulticell.py`` at the left side of this window and find ``scenario``. Click it and scroll down the right part of this window, there you can find the view of positions of all the nodes created by this config file (blue points are the base stations and red points are the user terminals).


=====================
A simple Scenario
=====================


We start this chapter with an example of a single cell scenario, in which one central base station and 2 user terminals are defined.


Part of ``config.py`` under directory ``myOpenWNS/tests/system/wimac-tests/configOFDMA/`` is presented as follows:

.. code-block:: python

   import scenarios.builders
   import scenarios.placer
   import scenarios.antenna
   import scenarios.traffic
   import winprost.qos

   # Create and place the nodes:
   # One BS (25m omnidirectional antenna height) with two nodes, one near, one far

   bsPlacer = scenarios.placer.HexagonalPlacer(numberOfCircles = 0, interSiteDistance = 100.0, rotate=0.0)
   uePlacer = scenarios.placer.LinearPlacer(numberOfNodes = 2, positionsList = [100, 400], rotate=0.3)
   bsAntenna = scenarios.antenna.IsotropicAntennaCreator([0.0, 0.0, 5.0])
   bsCreator = wimac.support.nodecreators.WiMAXBSCreator(stationIDs, Config)
   ueCreator = wimac.support.nodecreators.WiMAXUECreator(stationIDs, Config)
   channelmodelcreator = wimac.support.helper.TestChannelModelCreator()
   scenario = scenarios.builders.CreatorPlacerBuilder(bsCreator, bsPlacer, bsAntenna, 
                                                   ueCreator, uePlacer, channelmodelcreator)


The scenario, which is built by this configuration is shown in Figure :ref:`figure-scenarios-singlecell`.

.. _figure-scenarios-singlecell:

.. figure:: images/single_cell_scenario.*
   :align: center

   Station positions within this simple scenario


=============================
Explanation of configurations
=============================


.. code-block:: python

   import scenarios.builders
   import scenarios.placer
   import scenarios.antenna
   import scenarios.traffic
   import winprost.qos

This part imports necessary files for the scenario configuration.


.. code-block:: python

   bsPlacer = scenarios.placer.HexagonalPlacer(numberOfCircles = 0, interSiteDistance = 100.0, rotate=0.0)
   uePlacer = scenarios.placer.LinearPlacer(numberOfNodes = 2, positionsList = [100, 400], rotate=0.3)

``bsPlacer`` saves the locations of all base stations in a scenario, which is generated by ``scenarios.placer.HexagonalPlacer``. Since this is a single cell scenario, the numberOfCircles is set to 0.
``uePlacer`` saves the locations of all user terminals within each cell in this scenario, which is generated by ``scenarios.placer.LinearPlacer``. Here ``uePlacer`` uses a linear placer with 2 nodes at position 100 and 400. .

Have a look at the files in ``~/myOpenWNS/framework/scenarios/PyConfig/scenarios/placer/`` to find out what other placers are available. Try them out and visualise the result using ``pytree``. You can also change the number of nodes and, if supported by the placer, the number of circles.

.. code-block:: python

   bsAntenna = scenarios.antenna.IsotropicAntennaCreator([0.0, 0.0, 5.0])
   channelmodelcreator = wimac.support.helper.TestChannelModelCreator()

These two code lines define a isotropic antenna at 5m height and a channel model respectively. The channel model is a predefined test channel model. 

.. code-block:: python

   bsCreator = wimac.support.nodecreators.WiMAXBSCreator(stationIDs, Config)
   ueCreator = wimac.support.nodecreators.WiMAXUECreator(stationIDs, Config)
 available. 
``bsCreator`` creates base stations and ``ueCreator`` creates user terminals. The created stations use the IEEE 802.16 WiMAX radio access technology. The ``Config`` object defined on top of the configuration file is passed to the creators. Changing attributes of the ``Config`` class will therefore change parameters of the stations.

.. code-block:: python

   scenario = scenarios.builders.CreatorPlacerBuilder(bsCreator, bsPlacer, bsAntenna, 
                                                   ueCreator, uePlacer, channelmodelcreator)

Now all the parameters introduced above are combined and ``CreatorPlacerBuilder`` creates the scenario.

