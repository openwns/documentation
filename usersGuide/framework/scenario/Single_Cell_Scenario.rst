#############################
Pytree and a simple Scenarios
#############################


============================
Use pytree to show scenarios
============================

OpenWNS provides a tool named ``pytree`` to show the created scenarios and its parameters without starting simulation.
To use ``pytree`` to open a config file, for example: ``~/myOpenWNS/tests/system/wimac-tests/configOFDMA/configMulticell.py``, you should goto your test directoty ``~/myOpenWNS/tests/system/wimac-tests/configOFDMA`` and run the following command:

.. code-block:: bash

   $ myOpenWNS/bin/pytree.py configMulticell.py

After that, a visualised program will be started, like shown in :ref:`figure-scenarios-pytree`.


.. _figure-scenarios-pytree:

.. figure:: images/pytree.*
   :align: center

   view of pytree

Expand ``configMulticell.py`` at left side of this window and find ``secnario``. Click it and scroll down the right part of this window, you can find the view of positions of all the nodes created by this config file (blue points are base stations and red are user terminals).


=====================
A simple Scenarios
=====================


We start this chapter with an example of a single cell scenario, in which one central base station and 10 user terminals are defined.


Part of ``configSingleCell.py`` under directory ``myOpenWNS/tests/system/wimac-tests/configOFDMA/`` is presented as follows:

.. code-block:: python

   import scenarios.builders
   import scenarios.placer
   import scenarios.antenna
   import scenarios.traffic
   import winprost.qos

   # Create and place the nodes:
   # One BS (25m omnidirectional antenna height) with two nodes, one near, one far

   bsPlacer = scenarios.placer.HexagonalPlacer(numberOfCircles = 0, interSiteDistance = 100.0, rotate=0.0)
   uePlacer = scenarios.placer.LinearPlacer(numberOfNodes = 2, positionsList = [100, 400], rotate=0.3)
   bsAntenna = scenarios.antenna.IsotropicAntennaCreator([0.0, 0.0, 5.0])
   bsCreator = wimac.support.nodecreators.WiMAXBSCreator(stationIDs, Config)
   ueCreator = wimac.support.nodecreators.WiMAXUECreator(stationIDs, Config)
   channelmodelcreator = wimac.support.helper.TestChannelModelCreator()
   scenario = scenarios.builders.CreatorPlacerBuilder(bsCreator, bsPlacer, bsAntenna, 
                                                   ueCreator, uePlacer, channelmodelcreator)


The scenario built by this configuration is shown in Figure :ref:`figure-scenarios-singlecell`.

.. _figure-scenarios-singlecell:

.. figure:: images/single_cell_scenario.*
   :align: center

   Station positions within this simple scenario


=============================
Explanation of configurations
=============================


.. code-block:: python

   import scenarios.builders
   import scenarios.placer
   import scenarios.antenna
   import scenarios.traffic
   import winprost.qos

This part imports necessary files for scenario configuration.


.. code-block:: python

   bsPlacer = scenarios.placer.HexagonalPlacer(numberOfCircles = 0, interSiteDistance = 100.0, rotate=0.0)
   uePlacer = scenarios.placer.LinearPlacer(numberOfNodes = 2, positionsList = [100, 400], rotate=0.3)

``bsPlacer`` saves the locations of all base stations in a scenario, which is generated by ``scenarios.placer.HexagonalPlacer``. Since this is a single cell scenario, the numberOfCircles is set to 0.
``uePlacer`` saves the locations of all user terminals within each cell in this scenario, which is generated by ``scenarios.placer.LinearPlacer``. Here ``uePlacer`` uses a linear placer with 2 nodes at position 100 and 400. .

.. code-block:: python

   bsAntenna = scenarios.antenna.IsotropicAntennaCreator([0.0, 0.0, 5.0])
   channelmodelcreator = wimac.support.helper.TestChannelModelCreator()

These two code lines define the antenna model and channel model respectively. The channel model uses a predefined test channel model.

.. code-block:: python

   bsCreator = wimac.support.nodecreators.WiMAXBSCreator(stationIDs, Config)
   ueCreator = wimac.support.nodecreators.WiMAXUECreator(stationIDs, Config)

``bsCreator`` creats base stations and ``ueCreator`` creats user terminal as well. 

.. code-block:: python

   scenario = scenarios.builders.CreatorPlacerBuilder(bsCreator, bsPlacer, bsAntenna, 
                                                   ueCreator, uePlacer, channelmodelcreator)

Now all the parameters introduced above will be combined and set up in the Creator Placer Builder.

