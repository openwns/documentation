###################################
Experiment 7: The Flow Separator FU
###################################

***************
Flow Separation
***************

FUs as described comprise state and behavior. A Segmentation And
Reassembly (SAR) unit for example needs to store segments of compounds
to be able to apply reassembly. A FUN being part of a protocol stack
that is supposed to handle multiple connections needs to hold separate
states for each of the connections. One option is to let each FU
maintain the states for different flows and to select the appropriate
state for the processed compounds. This approach has a drawback: It
complicates the implementation of FUs, since it burdens the FU with
the maintenance of states. Another option is to implement a specialist
in separating flows and maintaining states. Thus, keeping FUs simple,
leaving them unaware of flows. Every FU implements functionality and
holds state for exactly one flow. The specialized flow separator
itself again is a FU, separating flows using a configurable separation
strategy and delegating requests to the according FU instance.

.. _fig-fun-fs:

.. figure:: images/sdr_06.*

   Flow separator structure.

Figure :ref:`fig-fun-fs` shows the structure of flow separation. The
``FlowSeparator`` itself is a FU. Like any other FU it is connected to
other FUs using the deliverer, receptor and connector sets. It is
configured using a ``KeyBuilder`` and a ``UnitBuilder``. The
``KeyBuilder`` is a strategy to extract information from a compound
that is sufficient to distinguish between compounds of different
flows. The keys generated by the ``KeyBuilder`` serve as key to an
instance container. For every compound, the flow separator creates a
new key, inspects its instance container and delegates the request to
the according instance. In case of receiving a compound that has no
available instance, yet, the flow separator creates a new instance
using the ``UnitBuilder``.

**************
Flow Separator
**************

* **Module**

  * ``wns.ldk.FlowSeparator``

* **Usage** 

  * Constructor: ``wns.ldk.FlowSeparator(prototypeName, prototype, keyBuilder)``
  * The FlowSeparator takes care of regiostering the prototype at the FUN with the given name.

* **Parameter**

  * ``prototypeName``

    * Name of the prototype in the FUN.

  * ``prototype``

    * Name to use for the prototype in the FUN.

  * ``keyBuilder`` 

    * Configuration of the key builder 

* **Provided Interface**

  * ``typename InstanceInterface`` (default ``FunctionalUnit``)

    * Abstract interface of the prototype. When using pure Python configuration, this is always set to ``FunctionalUnit``. 

  * ``std::size_t size() const``

    * Return number of active instances. 

  * ``const InstanceInterface* getPrototype() const``

    * Return the prototype instance. 

  * ``InstanceInterface* getInstance(const Key& key) const``

    * Return the instance matching the given key. 


Flow separation is achieved by a ``FlowSeparator`` creating instances
of a configurable FU for different flows, delegating requests to the
according instance.

Flow differentiation is done by the use of a key builder. The key
builder instantiates key objects based on compounds. These keys are
*less*-comparable and thus can be compared by the
``FlowSeparator``. If the keys of two compounds are not equal, the
compounds do not belong to the same flow.

Whenever the ``FlowSeparator`` receives a compound without having a
corresponding instance, it creates a new instance. The creation
strategy has been called ``UnitBuilder``. The ``FlowSeparator`` makes
use of the prototype pattern to implement the ``UnitBuilder``
strategy. It creates a prototype instance of the FU during
instantiation. This prototype is used to create new instances.

.. _fig-ldk-fs-outgoing:

.. figure:: images/sdr_11.*

   Outgoing connections.

.. _fig-ldk-fs-incoming:

.. figure:: images/sdr_12.*

   Incoming connections.

To integrate FU instances into the FUN, the ``FlowSeparator`` connects
the instances to the same FUs to whom itself is connected to. Figures
:ref:`fig-ldk-fs-outgoing` and :ref:`fig-ldk-fs-incoming` illustrate
the connections between FUs outside the ``FlowSeparator`` and
instances.


.. _figure-funtutorial-experiment7-fun:

.. figure:: images/experiment7.*
   :align: center

   FUN setup

.. literalinclude:: ../../../../../../.createManualsWorkingDir/glue.fun.tutorial.experiment7
   :language: python

.. _figure-funtutorial-experiment7-results-throughput-clients:

.. figure:: images/experiment7_throughput_clients.*
   :align: center
   :width: 560px

   Aggregated throughput of the clients vs. load

.. _figure-funtutorial-experiment7-results-throughput-ip-glue-bottom-clients:

.. figure:: images/experiment7_throughput_ip_glue_bottom_clients.*
   :align: center
   :width: 560px

   Aggregated throughput of the clients vs. load at the NL and bottom of DLL
